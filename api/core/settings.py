"""
Django settings for APTM project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import sys
import datetime
from pathlib import Path
from django.utils.log import DEFAULT_LOGGING

APP_TITLE = os.environ.get("APP_TITLE")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

APPEND_SLASH = True
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG") == "true")
JWT_DEBUG = bool(os.environ.get("JWT_DEBUG") == "true")

ALLOWED_HOSTS = ["*"]

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Application definition

VENDOR_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "storages",
    "drf_spectacular",
]

LOCAL_APPS = [
    "services.custom_command",
    "modules.account.user",
    "modules.account.staff",
    "modules.account.member",
    "modules.account.check_in",
    "modules.noti.verif",
    "modules.noti.notification",
    "modules.configuration.variable",
    "modules.infomation.club_info",
    "modules.infomation.promotion",
    "modules.club_service.service",
    "modules.club_service.dish",
    "modules.club_service.subservice",
    "modules.event.event",
]

INSTALLED_APPS = VENDOR_APPS + LOCAL_APPS

AUTH_USER_MODEL = "user.User"

MIDDLEWARE = [
    "services.middleware.cors.Cors",
    "services.middleware.strip_jwt.StripJWT",
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATE_DIRS = (os.path.join(BASE_DIR, "templates"),)
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": TEMPLATE_DIRS,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
        "TEST": {
            "NAME": os.environ.get("DB_TEST"),
        },
    },
}

CACHES = {"default": {"BACKEND": "django.core.cache.backends.locmem.LocMemCache"}}
CACHE_TIME = 60 * 60  # 1 hour


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "vi-vn"

TIME_ZONE = "Asia/Ho_Chi_Minh"

USE_I18N = True

USE_L10N = True

USE_TZ = False

DEFAULT_LANGUAGE_CODE = "vi_VN"
LOCALE_PATHS = [os.path.join(BASE_DIR, "public/locales")]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

PUBLIC_ROOT = os.path.join(BASE_DIR, "public")
PUBLIC_URL = "/public/"

STATIC_ROOT = os.path.join(PUBLIC_ROOT, "static")
STATIC_URL = PUBLIC_URL + "/static/"

MEDIA_ROOT = os.path.join(PUBLIC_ROOT, "media")
MEDIA_URL = PUBLIC_URL + "media/"

# Logging
LOGGING = DEFAULT_LOGGING

LOGGING["formatters"]["verbose"] = {
    "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
    "style": "{",
}

LOGGING["handlers"]["error_logfile"] = {
    "level": "ERROR",
    "class": "logging.FileHandler",
    "filename": os.path.join(BASE_DIR, "logs", "error.log"),
    "formatter": "verbose",
}
LOGGING["loggers"]["django"] = {
    "handlers": ["console", "error_logfile"],
    "level": "INFO",
}

LOG_TYPES = ["debug", "verif", "upload"]
for log_type in LOG_TYPES:
    handler = f"{log_type}_logfile"
    LOGGING["handlers"][handler] = {
        "level": "DEBUG",
        "class": "logging.FileHandler",
        "filename": os.path.join(BASE_DIR, "logs", f"{log_type}.log"),
    }
    LOGGING["loggers"][f"custom_{log_type}"] = {
        "handlers": [handler],
        "level": "DEBUG",
    }


####################################
#           Custom settings        #
####################################
TESTING = len(sys.argv) > 1 and sys.argv[1] == "test"
EMAIL_ENABLE = bool(os.environ.get("EMAIL_ENABLE") == "true")
SMS_ENABLE = bool(os.environ.get("SMS_ENABLE") == "true")

PROTOCOL = os.environ.get("PROTOCOL")
DOMAIN = os.environ.get("DOMAIN")

DEFAULT_WHITELIST_OTP = "123456"
VERIFICATION_CODE_EXPIRED_PERIOD = 120  # seconds

STANDARD_DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%S"
STANDARD_DATE_FORMAT = "%Y-%m-%d"
READABLE_DATE_FORMAT = "%d/%m/%Y"
READABLE_DATETIME_FORMAT = "%d/%m/%Y - %H:%M:%S"
US_DATE_FORMAT = "%m/%d/%Y"

# Django rest framework
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "services.drf_classes.custom_pagination.CustomPagination",
    "PAGE_SIZE": 10,
    "NON_FIELD_ERRORS_KEY": "detail",
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "services.drf_classes.jwt_auth.JWTAuth",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    "DATE_INPUT_FORMATS": ["%Y-%m-%d", "%Y-%m-%dT%H:%M:%S.%f", "%Y-%m-%dT%H:%M:%S.%fZ"],
}

JWT_EXPIRATION_DELTA = 60 * 60 * 24 * 1400  # 15 mins
JWT_REFRESH_EXPIRATION_DELTA = 60 * 60 * 24 * 1400  # 60 mins

if JWT_DEBUG:
    JWT_EXPIRATION_DELTA = 60 * 60 * 24 * 1400  # 1400 days
    JWT_REFRESH_EXPIRATION_DELTA = 60 * 60 * 24 * 1400  # 1400 days

JWT_AUTH = {
    "JWT_EXPIRATION_DELTA": datetime.timedelta(seconds=JWT_EXPIRATION_DELTA),
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(
        seconds=JWT_REFRESH_EXPIRATION_DELTA
    ),
    "JWT_ALLOW_REFRESH": True,
    "JWT_RESPONSE_PAYLOAD_HANDLER": "services.helpers.res_utils.JWT_RESPONSE_HANDLER",
}

# Recaptcha
CAPTCHA_ENABLED = bool(os.environ.get("CAPTCHA_ENABLED") == "true")
RECAPTCHA_PUBLIC_KEY = os.environ.get("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = os.environ.get("RECAPTCHA_PRIVATE_KEY")
CAPTCHA_SECRET = {
    "browser": RECAPTCHA_PRIVATE_KEY,
}
CAPTCHA_VALIDATE_URL = "https://www.google.com/recaptcha/api/siteverify"

# SMS
SPEED_SMS = {
    "BRANCH_NAME": os.environ.get("SPEED_SMS_BRANCH_NAME"),
    "ACCESS_TOKEN": os.environ.get("SPEED_SMS_ACCESS_TOKEN"),
    "TYPE": int(os.environ.get("SPEED_SMS_TYPE", 3)),
}

# S3 bucket
# AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
# AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")

# AWS_S3_FILE_OVERWRITE = False
# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
# AWS_QUERYSTRING_AUTH = False
# AWS_DEFAULT_ACL = "public-read"

SPECTACULAR_SETTINGS = {
    'TITLE': 'APTM',
    "DESCRIPTION": "APTM project",
    "VERSION": "1.0.0",
}
